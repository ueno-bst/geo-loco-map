// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../@tueeeeno/url-builder

declare module 'GeoLocoMap' {
    import { IMarkerData } from "GeoLocoMap/entities/Response";
    import { IController } from "GeoLocoMap/controllers/IController";
    import { ILatLng, ILatLngBounds } from "GeoLocoMap/entities/LatLng";
    export class GeoLocoMap extends IController {
        request(): void;
        getElement(): Element;
        getBounds(): ILatLngBounds | null;
        getZoom(): number;
        setZoom(zoom: number): void;
        getCenter(): ILatLng;
        setCenter(lat: number, lng: number): void;
        addMarker(...markers: IMarkerData[]): void;
        hasMarker(id: string): boolean;
        getMarker(id: string): IMarkerData | null;
        removeMarker(...ids: string[]): number;
        getViewInMarkers(limit?: number): IMarkerData[];
        getUI(): boolean;
        setUI(flag: boolean): void;
        getInfo(): boolean;
        setInfo(flag: boolean): void;
    }
}

declare module 'GeoLocoMap/entities/Response' {
    import { LatLng, ILatLng, ILatLngBounds } from "GeoLocoMap/entities/LatLng";
    export interface IResponse {
        datetime: string;
        timestamp: number;
        error: boolean;
        message: string;
        type: string;
        format: string;
        zoom: number;
        bounds: ILatLngBounds;
        count: number;
        data: any[];
    }
    export interface IBoundData {
        id: string;
        url: string;
        bounds: ILatLngBounds;
        label?: string;
        count: number;
    }
    export interface IMarkerData {
        id: string;
        url: string;
        label: string;
        description: string;
        description_format: string;
        feed: string;
        feed_flag: boolean;
        marker_display: boolean;
        coordinate: ILatLng;
        user: boolean;
    }
    export class MarkerData implements IMarkerData {
        coordinate: LatLng;
        description: string;
        description_format: string;
        feed: string;
        feed_flag: boolean;
        id: string;
        label: string;
        marker_display: boolean;
        url: string;
        user: boolean;
        static index: number;
        constructor(data: any);
        display(): boolean;
        content(): string;
        get lat(): number;
        get lng(): number;
        protected escapeHtml(text: string): string;
    }
}

declare module 'GeoLocoMap/controllers/IController' {
    import { Config, IConfig } from "GeoLocoMap/controllers/Config";
    import { ILatLng, ILatLngBounds } from "GeoLocoMap/entities/LatLng";
    import { IMarkerData } from "GeoLocoMap/entities/Response";
    import { MapEventListener, MapEventType } from "GeoLocoMap/controllers/MapEventType";
    import { MapController } from "GeoLocoMap/controllers/MapController";
    import { IEventTypes } from "GeoLocoMap/utils/EventEmitter";
    export abstract class IController {
        config: Config;
        protected readonly controller: MapController<Object>;
        constructor(params: IConfig);
        abstract request(): void;
        abstract getElement(): Element;
        abstract getBounds(): ILatLngBounds | null;
        abstract getZoom(): number;
        abstract setZoom(zoom: number): void;
        abstract getCenter(): ILatLng;
        abstract setCenter(lat: number, lng: number): void;
        abstract addMarker(marker: IMarkerData): void;
        abstract hasMarker(id: string): boolean;
        abstract getMarker(id: string): IMarkerData | null;
        abstract removeMarker(...ids: string[]): number;
        abstract getViewInMarkers(limit: number): IMarkerData[];
        abstract getUI(): boolean;
        abstract setUI(flag: boolean): void;
        abstract getInfo(): boolean;
        abstract setInfo(flag: boolean): void;
        on(types: IEventTypes<MapEventType | string>, callback: MapEventListener): this;
        off(types: IEventTypes<MapEventType | string>, callback: MapEventListener): this;
    }
}

declare module 'GeoLocoMap/entities/LatLng' {
    interface IBase {
        gmap(): any;
        ymap(): any;
        obj(): any;
    }
    interface ICoordinate extends IBase {
        fix(): this;
        round(base: number): this;
    }
    export interface IPoint {
        x: number;
        y: number;
    }
    export interface IRectangle {
        lt: IPoint;
        rb: IPoint;
    }
    export interface ILatLng {
        lat: number;
        lng: number;
    }
    export interface ILatLngBounds {
        ne: ILatLng;
        sw: ILatLng;
    }
    export class Point implements IPoint, IBase {
        x: number;
        y: number;
        constructor(x: number, y: number);
        constructor(x: Y.Point);
        constructor(x: google.maps.Point);
        constructor(x: IPoint);
        constructor(x: number[]);
        static is: (args: any) => args is IPoint;
        gmap(): google.maps.Point;
        ymap(): Y.Point;
        obj(): IPoint;
    }
    export class Rectangle implements IRectangle {
        lt: Point;
        rb: Point;
        constructor(lt: IRectangle);
        constructor(lt: google.maps.Point, rb: google.maps.Point);
        constructor(lt: Y.Point, rb: Y.Point);
        constructor(lt: IPoint, rb: IPoint);
        get left(): number;
        get right(): number;
        get top(): number;
        get bottom(): number;
        get width(): number;
        get height(): number;
        static is: (args: any) => args is IRectangle;
    }
    export class LatLng implements ILatLng, ICoordinate {
        lat: number;
        lng: number;
        constructor(lat: number, lng: number);
        constructor(lat: ILatLng);
        constructor(lat: Y.LatLng);
        constructor(lat: google.maps.LatLng);
        constructor(lat: number[]);
        static fromHash(hash: string): LatLng;
        hash(length: number): string;
        equals(p: LatLng): boolean;
        distance(p: LatLng): number;
        fix(): this;
        round(base: number, append?: boolean): this;
        gmap(): google.maps.LatLng;
        ymap(): Y.LatLng;
        obj(): ILatLng;
        static is: (args: any) => args is ILatLng;
    }
    export class LatLngBounds implements ILatLngBounds, ICoordinate {
        ne: LatLng;
        sw: LatLng;
        constructor(ne: ILatLng, sw: ILatLng);
        constructor(ne: ILatLngBounds);
        constructor(ne: Y.LatLngBounds);
        constructor(ne: google.maps.LatLngBounds);
        constructor(ne: ILatLng[]);
        constructor(ne: number[][]);
        inside(p: LatLng): boolean;
        outside(p: LatLng): boolean;
        fix(): this;
        round(base: number): this;
        gmap(): google.maps.LatLngBounds;
        ymap(): Y.LatLngBounds;
        obj(): ILatLngBounds;
        static is: (args: any) => args is ILatLngBounds;
    }
    export {};
}

declare module 'GeoLocoMap/controllers/Config' {
    import { ILatLng, ILatLngBounds, LatLng, LatLngBounds } from "GeoLocoMap/entities/LatLng";
    import { IMarkerData } from "GeoLocoMap/entities/Response";
    import { IController } from "GeoLocoMap/controllers/IController";
    import { URLBuilder } from "@tueeeeno/url-builder";
    export enum MapType {
        GoogleMap = "google",
        YahooMap = "yahoo"
    }
    export enum ApiType {
        CENTER = "center",
        BOUNDS = "bounds"
    }
    export interface IConfig {
        map_type: MapType | string;
        center: ILatLng | number[];
        center_bound?: ILatLngBounds;
        zoom?: number;
        zoom_min?: number;
        zoom_max?: number;
        selector: string;
        show_ui?: boolean;
        show_info?: boolean;
        api_url?: string;
        api?: IConfigApi;
        grid?: number;
        lazy_load?: number;
        debug?: boolean;
        onInit?: (ctrl: IController) => void;
        onZoom?: (ctrl: IController, zoom: number) => void;
        onMove?: (ctrl: IController, coordinate: ILatLng) => void;
        onUI?: (ctrl: IController, flag: boolean) => void;
        onInfo?: (ctrl: IController, flag: boolean) => void;
        onChange?: (ctrl: IController) => void;
        onAddMarker?: (ctrl: IController) => void;
        onHideMarker?: (ctrl: IController, marker: IMarkerData) => void;
        onClickMarker?: (ctrl: IController, marker: IMarkerData) => void;
        onRequest?: (ctrl: IController, url: URLBuilder) => void;
    }
    export interface IConfigApi {
        url?: string;
        user?: string;
        password?: string;
        type?: ApiType | string;
        precision?: number;
        delay?: number;
        auto?: boolean;
    }
    export class Config implements IConfig {
        api: ConfigApi;
        center: LatLng;
        center_bound?: LatLngBounds;
        map_type: MapType;
        selector: string;
        show_info: boolean;
        show_ui: boolean;
        zoom: number;
        zoom_min: number;
        zoom_max: number;
        debug: boolean;
        onInit?: (ctrl: IController) => void;
        onChange?: (ctrl: IController) => void;
        onInfo?: (ctrl: IController, flag: boolean) => void;
        onMove?: (ctrl: IController, coordinate: ILatLng) => void;
        onZoom?: (ctrl: IController, zoom: number) => void;
        onUI?: (ctrl: IController, flag: boolean) => void;
        onAddMarker?: (ctrl: IController) => void;
        onClickMarker?: (ctrl: IController, marker: IMarkerData) => void;
        onHideMarker?: (ctrl: IController, marker: IMarkerData) => void;
        onRequest?: (ctrl: IController, url: URLBuilder) => void;
        constructor(data: IConfig);
    }
    class ConfigApi implements IConfigApi {
        auto: boolean;
        delay: number;
        precision: number;
        type: ApiType | string;
        url: string;
        user: string;
        password: string;
        constructor(data: IConfigApi);
    }
    export {};
}

declare module 'GeoLocoMap/controllers/MapEventType' {
    import { IController } from "GeoLocoMap/controllers/IController";
    export enum MapEventType {
        INIT = "init",
        CHANGE = "change",
        MOVE = "move",
        ZOOM = "zoom",
        UI = "ui",
        info = "info",
        MARKER_ADD = "marker.add",
        MARKER_HIDE = "marker.hide",
        MARKER_SELECT = "marker.active",
        MARKER_RELEASE = "marker.disable",
        MARKER_HOVER = "marker.hover",
        API_REQUEST = "request",
        API_RESPONSE = "response"
    }
    export interface MapEventListener {
        (c: IController, ...args: any[]): void;
    }
}

declare module 'GeoLocoMap/controllers/MapController' {
    import { Config } from 'GeoLocoMap/controllers/Config';
    import { IMarkerData, IResponse, MarkerData } from "GeoLocoMap/entities/Response";
    import { IController } from "GeoLocoMap/controllers/IController";
    import { MapEventType } from "GeoLocoMap/controllers/MapEventType";
    import { LatLng, LatLngBounds } from "GeoLocoMap/entities/LatLng";
    import { MapElement } from "GeoLocoMap/controllers/Element";
    import EventEmitter from "GeoLocoMap/utils/EventEmitter";
    import { IDebugLayerController, IGridLayerController, ILayerController, IMessageLayerController } from "GeoLocoMap/controllers/ILayerController";
    export interface ILayers {
        grid: IGridLayerController;
        load: ILayerController;
        message: IMessageLayerController;
        debug?: {
            request: IDebugLayerController;
            response: IDebugLayerController;
        };
    }
    export abstract class MapController<M extends Object = {}, T extends Object = {}> {
        protected readonly root: IController;
        get config(): Config;
        protected readonly abstract map: M;
        getMap: () => M;
        protected readonly abstract layers: ILayers;
        readonly emit: EventEmitter<HTMLElement, [IController, ...any[]]>;
        protected target: MapElement;
        protected constructor(root: IController);
        protected init(): void;
        fire(type: MapEventType, change: boolean, ...args: any): void;
        protected apiRequestAwait(): void;
        apiRequest(): void;
        protected apiResponse(json: IResponse): void;
        protected onChangeHandler(): void;
        protected onMoveHandler(): void;
        protected onZoomListener(): void;
        protected onUIListener(show: boolean): void;
        protected abstract openModal(markers: MarkerData[]): void;
        abstract getBounds(): LatLngBounds | null;
        abstract setBounds(bounds: LatLngBounds): void;
        getElement(): Element;
        abstract getZoom(): number;
        abstract setZoom(zoom: number): void;
        abstract getCenter(): LatLng;
        abstract setCenter(center: LatLng): void;
        addMarker: (...markers: IMarkerData[]) => void;
        getMarker: (id: string) => IMarkerData | null;
        getDisplayMarkers: (limit?: number) => IMarkerData[];
        removeMarker: (...ids: string[]) => number;
        abstract setUI(show: boolean): void;
    }
}

declare module 'GeoLocoMap/utils/EventEmitter' {
    interface ICallback<T> {
        (...args: any): boolean | false | void;
    }
    export type IEventTypes<T extends string = string> = T | T[];
    export default class EventEmitter<T, C extends any[]> {
        constructor(bind: any);
        fix(types: IEventTypes): string[];
        has(type: string): boolean;
        count(type: string): number;
        on(types: IEventTypes, listener?: ICallback<T>, bind?: Object): this;
        off(types: IEventTypes, fn: ICallback<T>): this;
        fire(type: string, ...args: C): boolean;
    }
    export {};
}

declare module 'GeoLocoMap/controllers/Element' {
    import ElementHelper from "GeoLocoMap/utils/ElementHelper";
    import { IBoundData } from "GeoLocoMap/entities/Response";
    import { Rectangle, LatLng, LatLngBounds } from "GeoLocoMap/entities/LatLng";
    abstract class BaseElement extends ElementHelper {
        protected _hover: boolean;
        protected _active: boolean;
        get active(): boolean;
        get hover(): boolean;
        protected constructor(className?: string);
    }
    export interface IOverWrapBaseElement extends BaseElement {
        setPosition(rect: Rectangle): this;
    }
    abstract class OverWrapBaseElement extends BaseElement implements IOverWrapBaseElement {
        setPosition(rect: Rectangle): this;
    }
    export class MapElement extends ElementHelper {
        constructor(node: HTMLElement | string);
    }
    export class GridBoundElement extends OverWrapBaseElement {
        value: IBoundData;
        protected inner: ElementHelper;
        get bounds(): LatLngBounds;
        constructor(bound: IBoundData);
        setPosition(rect: Rectangle): this;
    }
    export class GridMarkerElement extends BaseElement {
        readonly point: LatLng;
        protected readonly refs: string[];
        constructor(latlng: LatLng, ...ids: string[]);
        addRefs(...refs: string[]): number;
        getRefs(): string[];
    }
    export class MessageElement extends OverWrapBaseElement {
        protected p: ElementHelper;
        constructor();
        getText(): string;
        setText(text: string): this;
        getHtml(): string;
        setHtml(text: string): this;
    }
    export class LoadingElement extends OverWrapBaseElement {
        constructor();
    }
    export class DebugElement extends OverWrapBaseElement {
        constructor();
    }
    export {};
}

declare module 'GeoLocoMap/controllers/ILayerController' {
    import { LatLng, LatLngBounds, Point, Rectangle } from "GeoLocoMap/entities/LatLng";
    import ElementHelper from "GeoLocoMap/utils/ElementHelper";
    import { MapController } from "GeoLocoMap/controllers/MapController";
    import { IBoundData, IMarkerData, MarkerData } from "GeoLocoMap/entities/Response";
    export interface ILayer {
        root?: ILayerController;
    }
    export abstract class ILayerController {
        abstract map: MapController<Object>;
        abstract layer: ILayer;
        constructor();
        init(): void;
        abstract refresh(): this;
        abstract remove(): this;
        abstract show(): this;
        abstract hide(): this;
        abstract target(clickable: boolean): ElementHelper | null;
        abstract coordinateToPixel(latlng: LatLng): Point;
        abstract boundToRect(bounds: LatLngBounds): Rectangle;
        abstract onAdd(): void;
        abstract onDraw(): void;
        abstract onRemove(): void;
    }
    export abstract class IMessageLayerController extends ILayerController {
        abstract html(html?: string): string | void;
        abstract text(text?: string): string | void;
    }
    export abstract class IGridLayerController extends ILayerController {
        abstract addBound(...bounds: IBoundData[]): void;
        abstract addMarker(...markers: IMarkerData[]): void;
        abstract getMarker(id: string): MarkerData | null;
        abstract getDisplayMarkers(limit: number): MarkerData[];
        abstract getGroupInMarker(id: string): MarkerData[];
        abstract removeMarker(...ids: string[]): number;
        abstract clear(): void;
    }
    export abstract class IDebugLayerController extends ILayerController {
        abstract setClasses(...classes: string[]): this;
        abstract setBound(rectangle: LatLngBounds): this;
    }
}

declare module 'GeoLocoMap/utils/ElementHelper' {
    import { Rectangle, Point } from "GeoLocoMap/entities/LatLng";
    export default class ElementHelper {
        protected node: HTMLElement;
        static query(query: string): ElementHelper | null;
        static queryAll(query: string): ElementHelper[];
        static div(): ElementHelper;
        static p(): ElementHelper;
        constructor(node: HTMLElement | ElementHelper | string);
        get src(): HTMLElement;
        getID(): string;
        setID(id: string): this;
        uniqueID(override?: boolean): this;
        getStyle(key: string): string | null;
        setStyle(key: string, value: string | null): this;
        setStyles(values: {
            [s: string]: string | null;
        }): this;
        setPosition(value?: Rectangle | Point): this;
        setSize(value?: Rectangle): this;
        getText(): string;
        setText(text: string): this;
        getHtml(): string;
        setHtml(text: string): this;
        hasClass(name: string): boolean;
        addClass(...names: string[]): this;
        removeClass(...names: string[]): this;
        toggleClass(name: string, toggle: boolean): this;
        append(child: ElementHelper | HTMLElement): this;
        parent(): ElementHelper | null;
        remove(): this;
        empty(): this;
        first(): ElementHelper | null;
        on(types: string | string[], listener: (e: Event) => void, binding?: Object): this;
        off(types: string | string[], listener: (e: Event) => void): this;
        fire(types: string | string[]): this;
    }
}

